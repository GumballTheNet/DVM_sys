cmake_minimum_required(VERSION 2.8.0)
project(CDVMH CXX)
set(CDVMH_VERSION_MAJOR 0)
set(CDVMH_VERSION_MINOR 1)
set(CDVMH_VERSION "${TSAR_VERSION_MAJOR}.${TSAR_VERSION_MINOR}")
set(CDVMH_NAME "CDVMH")
set(CDVMH_STRING "${CDVMH_NAME} ${CDVMH_VERSION}")
set(DVM_SOURCE_DIR "${PROJECT_SOURCE_DIR}/../../")
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
include(CheckCXXCompilerFlag)
include(llvm-utility)
include(utility)
find_package(Subversion)
if(NOT Subversion_FOUND)
  message(FATAL_ERROR "Subversion command line client executable is not found.")
endif()
# Determine type of compiler to specify flags properly.
# This code is taken from LLVM (cmake/modulesHandleLLVMOptions.cmake).
if(CMAKE_COMPILER_IS_GNUCXX)
  set(CDVMH_COMPILER_IS_GCC_COMPATIBLE ON)
elseif(MSVC)
  set(CDVMH_COMPILER_IS_GCC_COMPATIBLE OFF)
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  set(CDVMH_COMPILER_IS_GCC_COMPATIBLE ON)
endif()
# Enable C++ 11 support.
# This code is taken from LLVM (cmake/modulesHandleLLVMOptions.cmake).
if(CDVMH_COMPILER_IS_GCC_COMPATIBLE)
  check_cxx_compiler_flag("-std=c++11" CXX_SUPPORTS_CXX11)
  if(CXX_SUPPORTS_CXX11)
    if(CYGWIN OR MINGW)
      # MinGW and Cygwin are a bit stricter and lack things like
      # 'strdup', 'stricmp', etc in c++11 mode.
      append("-std=gnu++11" CMAKE_CXX_FLAGS)
    else()
      append("-std=c++11" CMAKE_CXX_FLAGS)
    endif()
  else()
    message(FATAL_ERROR 
      "TSAR requires C++11 support but the '-std=c++11' flag isn't supported.")
  endif()
endif(CDVMH_COMPILER_IS_GCC_COMPATIBLE)
# There are four steps to configure LLVM and Clang:
# 1. Check out a working copies ${LLVM_SOURCE_DIR} and ${CLANG_SOURCE_DIR}
#    (or update if it already exists) from LLVM repository ${LLVM_REPO}.
# 2. Apply patch in ${CMAKE_SOURCE_DIR}/patches/ to the working copies 
#    ${LLVM_SOURCE_DIR} and ${CLANG_SOURCE_DIR}.
#    The patches for LLVN have names
#      llvm.patch or 
#      llvm-${LLVM_VERSION_MAJOR}.patch (example llvm-3.patch) or
#      llvm-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.patch (example llvm-3.4.patch) or
#      llvm-${LLVM_PACKAGE_VERSION}.patch (example llvm-3.4.2.patch)
#    The similar names of patches are used for Clang (use 'clang-' suffix instead 'llvm-'). 
#    All suitable patches will be applied simultaneously
# 3. Configure LLVM project.
# 4. Specify LLVM dependences (include directories, libraries, macros etc.).
set(LLVM_REPO "http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_342/final/"
    CACHE STRING "URL of LLVM subversion repository (usefull only if DOWNLOAD_LLVM is set)")
set(CLANG_REPO "http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_342/final/"
    CACHE STRING "URL of Clang subversion repository (usefull only if DOWNLOAD_LLVM and BUILD_CLANG are set)")
set(LLVM_SOURCE_DIR "${CMAKE_BINARY_DIR}/llvm" CACHE PATH "Root of LLVM source tree")
set(CLANG_SOURCE_DIR "${LLVM_SOURCE_DIR}/tools/clang")
set(LLVM_BINARY_DIR "${CMAKE_BINARY_DIR}/llvm-build")
set(CLANG_BINARY_DIR "${LLVM_BINARY_DIR}/tools/clang")
set(LLVM_DIR "${LLVM_BINARY_DIR}/share/llvm/cmake")
option(DOWNLOAD_LLVM "Download LLVM from subversion repository" OFF)
option(LOCAL_LLVM "Use existing LLVM installation" OFF)
if(DOWNLOAD_LLVM AND LOCAL_LLVM)
  message(FATAL_ERROR "Options DOWNLOAD_LLVM and LOCAL_LLVM are not compatible")
endif()
# Download LLVM if need
set(DOWNLOAD_CLANG ${DOWNLOAD_LLVM})
if(DOWNLOAD_LLVM)
  sapfor_download_llvm()
elseif(LOCAL_LLVM)
  unset(LLVM_REPO CACHE)
endif()
if(LOCAL_LLVM OR DOWNLOAD_LLVM)
  # Configure LLVM
  if(NOT EXISTS ${LLVM_SOURCE_DIR})
    message(FATAL_ERROR "LLVM_SOURCE_DIR '${LLVM_SOURCE_DIR}' does not exist")
  endif()
  if (BUILD_CLANG AND NOT EXISTS ${CLANG_SOURCE_DIR})
    message(FATAL_ERROR "CLANG_SOURCE_DIR '${CLANG_SOURCE_DIR}' does not exist")
  endif()
  set(LLVM_STATUS "Configuring LLVM project")
  message(STATUS ${LLVM_STATUS})
  set(SAVE_CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
  set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/llvm-install")
  add_subdirectory(${LLVM_SOURCE_DIR} ${LLVM_BINARY_DIR} EXCLUDE_FROM_ALL)
  set(CMAKE_INSTALL_PREFIX ${SAVE_CMAKE_INSTALL_PREFIX})
  find_package(LLVM CONFIG)
  if(NOT LLVM_FOUND)
   message(FATAL_ERROR "${LLVM_STATUS} - error")
  else()
   message(STATUS "${LLVM_STATUS} - done")
  endif()  
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/llvm.patch" ${LLVM_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/llvm-${LLVM_VERSION_MAJOR}.patch" ${LLVM_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/llvm-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.patch" ${LLVM_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/llvm-${LLVM_PACKAGE_VERSION}.patch" ${LLVM_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/clang.patch" ${CLANG_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/clang-${LLVM_VERSION_MAJOR}.patch" ${CLANG_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/clang-${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.patch" ${CLANG_SOURCE_DIR})
  sapfor_patch("${PROJECT_SOURCE_DIR}/patches/clang-${LLVM_PACKAGE_VERSION}.patch" ${CLANG_SOURCE_DIR})  
  set(LLVM_STATUS "Specifying LLVM dependences (include directories, libraries, macros etc.)")
  message(STATUS ${LLVM_STATUS})
  set(LLVM_COMPONENTS analysis bitreader core support target transformutils
    ipa mcparser mc object option)
  if(${LLVM_PACKAGE_VERSION} VERSION_LESS "3.5")
    llvm_map_components_to_libraries(LLVM_LIBS ${LLVM_COMPONENTS})
    set(LLVM_INCLUDE_DIRS "${LLVM_SOURCE_DIR}/include;${LLVM_BINARY_DIR}/include")
    set(LLVM_LIBRARY_DIRS "${LLVM_BINARY_DIR}/$(Configuration)/lib")
    set(LLVM_TOOLS_BINARY_DIR "${LLVM_BINARY_DIR}/$(Configuration)/bin")
  else()
    llvm_map_components_to_libnames(LLVM_LIBS ${LLVM_COMPONENTS})
  endif()
  set(LLVM_INCLUDE_DIRS "${LLVM_INCLUDE_DIRS};${CLANG_SOURCE_DIR}/include;${CLANG_BINARY_DIR}/include")
  set(LLVM_LIBS ${LLVM_LIBS} clangFrontend clangDriver clangSerialization)
  set(LLVM_LIBS ${LLVM_LIBS} clangParse clangSema clangAnalysis clangRewriteCore)
  set(LLVM_LIBS ${LLVM_LIBS} clangEdit clangAST clangLex clangBasic)  
  include_directories(${LLVM_INCLUDE_DIRS})
  add_definitions(${LLVM_DEFINITIONS})
  if((${LLVM_PACKAGE_VERSION} VERSION_LESS "3.5"))
    link_directories(${LLVM_LIBRARY_DIRS})
  endif()
  message(STATUS "${LLVM_STATUS} - done")    
  if(${LLVM_PACKAGE_VERSION} VERSION_LESS "3.5" OR NOT LLVM_ENABLE_RTTI)
    if(CDVMH_COMPILER_IS_GCC_COMPATIBLE)
      sapfor_replace_compiler_option(CMAKE_CXX_FLAGS "-frtti" "-fno-rtti")
    elseif(MSVC)
      sapfor_replace_compiler_option(CMAKE_CXX_FLAGS "/GR" "/GR-")
    endif()
  endif()
  include_directories(include)    
  add_subdirectory(src) 
endif()